/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/laptopv5.glb
Author: BlaÅ¾ Mraz (https://sketchfab.com/Mraz3D)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/modern-slim-laptop-fbf172f8b14241feab581dcb1fbcd475
Title: Modern Slim Laptop
*/

import React, { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useTexture, useScroll, Float } from "@react-three/drei";
import { gsap } from "gsap";

export default function Laptop({ mobile, props }) {
  const { nodes, materials } = useGLTF("/modelsResource/laptop.glb");
  const [laptopScreenPath, setLaptopScreenPath] = useState(
    "./images/Thumbnails/codeThumb.png"
  );
  const [screenSize, setScreenSize] = useState(0);
  const startScreenPosition = {
    rot: { x: 1.03, y: 0, z: 0 },
    pos: { x: -30, y: 0.45, z: 0.45 },
  };

  // rot: { x: 1.03, y: 0, z: 0 },
  // pos: { x: 0, y: 0.06, z: 0.4 },

  // pos: { x: 0, y: 0.12, z: 0.01 },

  const startTexture = useTexture("./images/ThumbnailsSmall/codeThumb.png");
  const kboReeshofTexture = useTexture(
    "./images/ThumbnailsSmall/KBOReeshofThumb.png"
  );
  const yoDashboardTexture = useTexture(
    "./images/ThumbnailsSmall/YODashboardThumb.png"
  );
  const yoGwotyTexture = useTexture(
    "./images/ThumbnailsSmall/YOGwotyThumb.png"
  );
  const StandaardAanbouwTexture = useTexture(
    "./images/ThumbnailsSmall/StandaardAanbouwThumb.png"
  );
  const ReisartikelenTexture = useTexture(
    "./images/ThumbnailsSmall/ReisartikelenThumb.jpg"
  );

  const [startingScreen, setStartingScreen] = useState(true);
  const [project1Screen, setProject1Screen] = useState(false);
  const [project2Screen, setProject2Screen] = useState(false);
  const [project3Screen, setProject3Screen] = useState(false);
  const [project4Screen, setProject4Screen] = useState(false);
  const [project5Screen, setProject5Screen] = useState(false);
  const [accentColor, setAccentColor] = useState("blue");
  const [float, setFloat] = useState(false);

  const laptop = useRef();
  const screenRot = useRef();
  const scroll = useScroll();
  const timeline = useRef();
  const laptopBottom = useRef();

  // Update timeline
  useFrame((state, delta) => {
    if (typeof timeline.current !== "undefined")
      timeline.current.seek(scroll.offset * timeline.current.duration());

    // console.log(scroll.offset);

    // Hardcoded screenchange since .call function from gsap has performance issues
    if (mobile) {
      if (scroll.offset < 0.09) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("colorMain");
        // setLaptopScreenPath("./images/ThumbnailsSmall/codeThumb.png");
      } else if (scroll.offset >= 0.09 && scroll.offset <= 0.44) {
        setStartingScreen(false);
        setProject1Screen(true);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("noColor");
        // setLaptopScreenPath("./images/ThumbnailsSmall/KBOReeshofThumb.png");
      } else if (scroll.offset >= 0.45 && scroll.offset <= 0.53) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(true);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("noColor");
        // setLaptopScreenPath("./images/ThumbnailsSmall/YODashboardThumb.png");
      } else if (scroll.offset >= 0.54 && scroll.offset <= 0.643) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(true);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("noColor");
        // setLaptopScreenPath("./images/ThumbnailsSmall/YOGwotyThumb.png");
      } else if (scroll.offset >= 0.644 && scroll.offset <= 0.73) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(true);
        setProject5Screen(false);
        setAccentColor("noColor");
        // setLaptopScreenPath(
        //   "./images/ThumbnailsSmall/StandaardAanbouwThumb.png"
        // );
      } else if (scroll.offset >= 0.74 && scroll.offset <= 0.99) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(true);
        setAccentColor("noColor");
        // setLaptopScreenPath("./images/ThumbnailsSmall/ReisartikelenThumb.jpg");
      }
    } else {
      if (scroll.offset < 0.09) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("colorMain");
        // setLaptopScreenPath("./images/ThumbnailsSmall/codeThumb.png");
      } else if (scroll.offset >= 0.09 && scroll.offset <= 0.392) {
        setStartingScreen(false);
        setProject1Screen(true);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(false);
        if (scroll.offset >= 0.32) {
          setAccentColor("colorKBO");
          setFloat(true);
        } else {
          setAccentColor("noColor");
        }

        // setLaptopScreenPath("./images/ThumbnailsSmall/KBOReeshofThumb.png");
      } else if (scroll.offset >= 0.393 && scroll.offset <= 0.4885) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(true);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("colorYo");
        // setLaptopScreenPath("./images/ThumbnailsSmall/YODashboardThumb.png");
      } else if (scroll.offset >= 0.4886 && scroll.offset <= 0.6009) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(true);
        setProject4Screen(false);
        setProject5Screen(false);
        setAccentColor("colorYo");
        // setLaptopScreenPath("./images/ThumbnailsSmall/YOGwotyThumb.png");
      } else if (scroll.offset >= 0.601 && scroll.offset <= 0.6929) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(true);
        setProject5Screen(false);
        setAccentColor("colorSa");
        // setLaptopScreenPath(
        //   "./images/ThumbnailsSmall/StandaardAanbouwThumb.png"
        // );
      } else if (scroll.offset >= 0.693) {
        setStartingScreen(false);
        setProject1Screen(false);
        setProject2Screen(false);
        setProject3Screen(false);
        setProject4Screen(false);
        setProject5Screen(true);
        setAccentColor("colorOther");
        // setLaptopScreenPath("./images/ThumbnailsSmall/ReisartikelenThumb.jpg");
      }
    }
  });

  useEffect(() => {
    if (typeof window !== "undefined") {
      let previousWidth = window.innerWidth;
      let isThrottled = false;

      function updateDimension() {
        if (isThrottled) return;

        isThrottled = true;

        // Delay the function execution to ensure it's not running too often
        setTimeout(() => {
          const currentWidth = window.innerWidth;

          // Check if screen width crosses 1000px (either direction)
          if (
            (previousWidth <= 1000 && currentWidth > 1000) ||
            (previousWidth > 1000 && currentWidth <= 1000)
          ) {
            location.reload();
          }

          // Update the previousWidth to currentWidth
          previousWidth = currentWidth;

          setScreenSize(currentWidth);
          isThrottled = false; // Reset throttle flag
        }, 200); // Set the throttle delay (200ms here, adjust as needed)
      }

      window.addEventListener("resize", updateDimension);

      return () => {
        window.removeEventListener("resize", updateDimension);
      };
    }
  }, [screenSize]);

  useEffect(() => {
    const background = document.querySelector("#background");
    background.setAttribute("color", accentColor);
  }, [accentColor]);

  useEffect(() => {
    // Setup timeline
    timeline.current = gsap.timeline({
      defaults: { duration: 1 },
    });

    // Screen rotation values
    const rotation = {
      openStart: {
        rot: { x: 1.06, y: 0, z: 0 },
        pos: { x: 0, y: 0.12, z: 0.01 },
      },
      open: { rot: { x: 1.56, y: 0, z: 0 }, pos: { x: 0, y: 0.12, z: 0.01 } },
      close: {
        rot: { x: Math.PI / 0.995, y: 0, z: 0 },
        pos: { x: 0, y: 0.122, z: 0.01 },
      },
    };

    // Animation
    const startpositions = mobile
      ? {
          hero: 0,
          portfolioIntro: 6,
          firstProject: 7.5,
          firstProjectEnd: 8.8,
          secondProject: 9.8,
          secondProjectEnd: 10.8,
          thirdProject: 11.8,
          thirdProjectEnd: 12.8,
          fourthProject: 13.8,
          fourthProjectEnd: 14.8,
          otherProjects: 15.85,
          otherProjectsEnd: 17,
        }
      : {
          hero: 0,
          portfolioIntro: 5,
          firstProject: 7,
          firstProjectEnd: 8,
          secondProject: 9,
          secondProjectEnd: 10,
          thirdProject: 11,
          thirdProjectEnd: 12,
          fourthProject: 13,
          fourthProjectEnd: 14,
          otherProjects: 15.5,
          otherProjectsEnd: 16.5,
        };

    timeline.current
      // OPENINGSANIMATION
      .to(
        screenRot.current.rotation,
        { x: rotation.close.rot.x },
        startpositions.hero
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.close.rot.y },
        startpositions.hero
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.close.rot.z },
        startpositions.hero
      )
      .to(screenRot.current.position, { x: 0 }, startpositions.hero)
      .to(
        screenRot.current.position,
        { y: rotation.close.pos.y },
        startpositions.hero
      )
      .to(
        screenRot.current.position,
        { z: rotation.close.pos.z },
        startpositions.hero
      )
      .to(laptop.current.rotation, { x: -Math.PI / 2 }, startpositions.hero)
      // .to(laptop.current.position, { y: 0 }, startpositions.hero)
      .to(laptop.current.position, { x: -30 }, 1)
      // .to(laptop.current.position, { x: -20 }, 3.5)
      // .to(laptop.current.rotation, { z: -1 }, 3.5)
      .to(
        laptop.current.position,
        { y: mobile ? -3.5 : -3 },
        startpositions.portfolioIntro
      )
      .to(laptop.current.position, { x: 0 }, startpositions.portfolioIntro)
      .to(laptop.current.rotation, { z: 0 }, startpositions.portfolioIntro)
      // FIRST PROJECT
      .to(
        screenRot.current.rotation,
        { x: rotation.open.rot.x },
        startpositions.firstProject
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.open.rot.y },
        startpositions.firstProject
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.open.rot.z },
        startpositions.firstProject
      )
      .to(
        screenRot.current.position,
        { x: rotation.open.pos.x },
        startpositions.firstProject
      )
      .to(
        screenRot.current.position,
        { y: rotation.open.pos.y },
        startpositions.firstProject
      )
      .to(
        screenRot.current.position,
        { z: rotation.open.pos.z },
        startpositions.firstProject
      )
      .to(
        laptop.current.position,
        { x: mobile ? 0 : -5 },
        startpositions.firstProject
      )
      .to(
        laptop.current.rotation,
        { z: Math.PI / 4 },
        startpositions.firstProject
      )
      // First to second project transition
      .to(
        screenRot.current.rotation,
        { x: rotation.close.rot.x },
        startpositions.firstProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.close.rot.y },
        startpositions.firstProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.close.rot.z },
        startpositions.firstProjectEnd
      )
      .to(
        screenRot.current.position,
        { x: rotation.close.pos.x },
        startpositions.firstProjectEnd
      )
      .to(
        screenRot.current.position,
        { y: rotation.close.pos.y },
        startpositions.firstProjectEnd
      )
      .to(
        screenRot.current.position,
        { z: rotation.close.pos.z },
        startpositions.firstProjectEnd
      )

      .to(laptop.current.position, { x: 0 }, startpositions.firstProjectEnd)
      .to(
        laptop.current.rotation,
        { z: Math.PI },
        startpositions.firstProjectEnd
      )
      // SECOND PROJECT
      .to(
        screenRot.current.rotation,
        { x: rotation.open.rot.x },
        startpositions.secondProject
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.open.rot.y },
        startpositions.secondProject
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.open.rot.z },
        startpositions.secondProject
      )
      .to(
        screenRot.current.position,
        { x: rotation.open.pos.x },
        startpositions.secondProject
      )
      .to(
        screenRot.current.position,
        { y: rotation.open.pos.y },
        startpositions.secondProject
      )
      .to(
        screenRot.current.position,
        { z: rotation.open.pos.z },
        startpositions.secondProject
      )
      .to(
        laptop.current.position,
        { x: mobile ? 0 : 3 },
        startpositions.secondProject
      )
      .to(laptop.current.position, { z: 0 }, startpositions.secondProject)
      .to(
        laptop.current.rotation,
        { z: Math.PI * 2 - Math.PI / 4 },
        startpositions.secondProject
      )
      // Second to third project transition
      .to(
        screenRot.current.rotation,
        { x: rotation.close.rot.x },
        startpositions.secondProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.close.rot.y },
        startpositions.secondProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.close.rot.z },
        startpositions.secondProjectEnd
      )
      .to(
        screenRot.current.position,
        { x: rotation.close.pos.x },
        startpositions.secondProjectEnd
      )
      .to(
        screenRot.current.position,
        { y: rotation.close.pos.y },
        startpositions.secondProjectEnd
      )
      .to(
        screenRot.current.position,
        { z: rotation.close.pos.z },
        startpositions.secondProjectEnd
      )

      .to(laptop.current.position, { x: 0 }, startpositions.secondProjectEnd)
      .to(
        laptop.current.rotation,
        { z: Math.PI },
        startpositions.secondProjectEnd
      )

      // THIRD PROJECT
      .to(
        screenRot.current.rotation,
        { x: rotation.open.rot.x },
        startpositions.thirdProject
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.open.rot.y },
        startpositions.thirdProject
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.open.rot.z },
        startpositions.thirdProject
      )
      .to(
        screenRot.current.position,
        { x: rotation.open.pos.x },
        startpositions.thirdProject
      )
      .to(
        screenRot.current.position,
        { y: rotation.open.pos.y },
        startpositions.thirdProject
      )
      .to(
        screenRot.current.position,
        { z: rotation.open.pos.z },
        startpositions.thirdProject
      )
      .to(
        laptop.current.position,
        { x: mobile ? 0 : -5 },
        startpositions.thirdProject
      )
      .to(
        laptop.current.rotation,
        { z: Math.PI / 4 },
        startpositions.thirdProject
      )
      // Third to fourth project transition
      .to(
        screenRot.current.rotation,
        { x: rotation.close.rot.x },
        startpositions.thirdProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.close.rot.y },
        startpositions.thirdProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.close.rot.z },
        startpositions.thirdProjectEnd
      )
      .to(
        screenRot.current.position,
        { x: rotation.close.pos.x },
        startpositions.thirdProjectEnd
      )
      .to(
        screenRot.current.position,
        { y: rotation.close.pos.y },
        startpositions.thirdProjectEnd
      )
      .to(
        screenRot.current.position,
        { z: rotation.close.pos.z },
        startpositions.thirdProjectEnd
      )
      .to(laptop.current.position, { z: -2 }, startpositions.thirdProjectEnd)
      .to(laptop.current.position, { x: 0 }, startpositions.thirdProjectEnd)
      .to(laptop.current.rotation, { z: 0 }, startpositions.thirdProjectEnd)
      .to(
        laptop.current.rotation,
        { x: -Math.PI },
        startpositions.thirdProjectEnd
      )

      // FOURTH PROJECT
      .to(laptop.current.position, { z: 0 }, startpositions.fourthProject)
      .to(
        laptop.current.rotation,
        { x: -Math.PI / 2 },
        startpositions.fourthProject
      )

      .to(
        screenRot.current.rotation,
        { x: rotation.open.rot.x },
        startpositions.fourthProject
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.open.rot.y },
        startpositions.fourthProject
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.open.rot.z },
        startpositions.fourthProject
      )
      .to(
        screenRot.current.position,
        { x: rotation.open.pos.x },
        startpositions.fourthProject
      )
      .to(
        screenRot.current.position,
        { y: rotation.open.pos.y },
        startpositions.fourthProject
      )
      .to(
        screenRot.current.position,
        { z: rotation.open.pos.z },
        startpositions.fourthProject
      )
      .to(
        laptop.current.position,
        { x: mobile ? 0 : 5 },
        startpositions.fourthProject
      )
      .to(
        laptop.current.rotation,
        { z: -Math.PI / 4 },
        startpositions.fourthProject
      )
      // Fourth to other project transition
      .to(
        screenRot.current.rotation,
        { x: rotation.close.rot.x },
        startpositions.fourthProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.close.rot.y },
        startpositions.fourthProjectEnd
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.close.rot.z },
        startpositions.fourthProjectEnd
      )
      .to(
        screenRot.current.position,
        { x: rotation.close.pos.x },
        startpositions.fourthProjectEnd
      )
      .to(
        screenRot.current.position,
        { y: rotation.close.pos.y },
        startpositions.fourthProjectEnd
      )
      .to(
        screenRot.current.position,
        { z: rotation.close.pos.z },
        startpositions.fourthProjectEnd
      )
      .to(laptop.current.position, { x: 0 }, startpositions.fourthProjectEnd)
      .to(laptop.current.rotation, { z: 0 }, startpositions.fourthProjectEnd)
      // OTHER PROJECTS
      .to(
        screenRot.current.rotation,
        { x: rotation.open.rot.x },
        startpositions.otherProjects
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.open.rot.y },
        startpositions.otherProjects
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.open.rot.z },
        startpositions.otherProjects
      )
      .to(
        screenRot.current.position,
        { x: rotation.open.pos.x },
        startpositions.otherProjects
      )
      .to(
        screenRot.current.position,
        { y: rotation.open.pos.y },
        startpositions.otherProjects
      )
      .to(
        screenRot.current.position,
        { z: rotation.open.pos.z },
        startpositions.otherProjects
      )
      .to(
        screenRot.current.rotation,
        { x: rotation.close.rot.x },
        startpositions.otherProjectsEnd
      )
      .to(
        screenRot.current.rotation,
        { y: rotation.close.rot.y },
        startpositions.otherProjectsEnd
      )
      .to(
        screenRot.current.rotation,
        { z: rotation.close.rot.z },
        startpositions.otherProjectsEnd
      )
      .to(
        screenRot.current.position,
        { x: rotation.close.pos.x },
        startpositions.otherProjectsEnd
      )
      .to(
        screenRot.current.position,
        { y: rotation.close.pos.y },
        startpositions.otherProjectsEnd
      )
      .to(
        screenRot.current.position,
        { z: rotation.close.pos.z },
        startpositions.otherProjectsEnd
      )
      .to(laptop.current.rotation, { y: 0 }, 20)
      .to(laptop.current.rotation, { x: 0 }, 20)
      .to(laptop.current.position, { x: 0 }, 20);
  }, [mobile]);

  return (
    <Float
      speed={float ? 0.85 : 0}
      rotationIntensity={0.5} // XYZ rotation intensity, defaults to 1
      floatIntensity={0.5} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
      floatingRange={[0.05, 0.05]} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]
    >
      <group
        {...props}
        dispose={null}
        scale={mobile ? 10 : 16}
        ref={laptop}
        position={[0, mobile ? -15 : -9, 0]} // [0, mobile ? -15 : -7, 0]
        rotation={[-1, 0, 0]}
        className={accentColor}
      >
        <group scale={0.01}>
          <group position={[0, 0.02, 0]} rotation={[0, 0, 0]} scale={100}>
            <group
              position={[
                startScreenPosition.pos.x,
                startScreenPosition.pos.y,
                startScreenPosition.pos.z,
              ]}
              rotation={[
                startScreenPosition.rot.x,
                startScreenPosition.rot.y,
                startScreenPosition.rot.z,
              ]}
              ref={screenRot}
            >
              <mesh
                geometry={nodes.Screen_Frame_Screen_Frame_0.geometry}
                material={materials.Screen_Frame}
              />
              <mesh
                geometry={nodes.Screen_Frame_Screen_Shiny_Border_0.geometry}
                material={materials.Screen_Shiny_Border}
              />
              <mesh
                geometry={nodes.Screen_Frame_Base_0.geometry}
                material={materials.Base}
              />
              <mesh
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 0.127, 0]}
                scale={0.0198}
              >
                <boxGeometry args={[0.01, 10.6, 16]} />
                <meshStandardMaterial
                  map={startTexture}
                  roughness={0.3}
                  metalness={0.3}
                  opacity={startingScreen ? 1 : 0}
                  transparent
                />
              </mesh>
              <mesh
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 0.127, 0]}
                scale={0.0198}
              >
                <boxGeometry args={[0.01, 10.6, 16]} />
                <meshStandardMaterial
                  map={kboReeshofTexture}
                  roughness={0.3}
                  metalness={0.3}
                  opacity={project1Screen ? 1 : 0}
                  transparent
                />
              </mesh>
              <mesh
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 0.127, 0]}
                scale={0.0198}
              >
                <boxGeometry args={[0.01, 10.6, 16]} />
                <meshStandardMaterial
                  map={yoDashboardTexture}
                  roughness={0.3}
                  metalness={0.3}
                  opacity={project2Screen ? 1 : 0}
                  transparent
                />
              </mesh>
              <mesh
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 0.127, 0]}
                scale={0.0198}
              >
                <boxGeometry args={[0.01, 10.6, 16]} />
                <meshStandardMaterial
                  map={yoGwotyTexture}
                  roughness={0.3}
                  metalness={0.3}
                  opacity={project3Screen ? 1 : 0}
                  transparent
                />
              </mesh>
              <mesh
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 0.127, 0]}
                scale={0.0198}
              >
                <boxGeometry args={[0.01, 10.6, 16]} />
                <meshStandardMaterial
                  map={StandaardAanbouwTexture}
                  roughness={0.3}
                  metalness={0.3}
                  opacity={project4Screen ? 1 : 0}
                  transparent
                />
              </mesh>
              <mesh
                rotation={[0, Math.PI / 2, 0]}
                position={[0, 0.127, 0]}
                scale={0.0198}
              >
                <boxGeometry args={[0.01, 10.6, 16]} />
                <meshStandardMaterial
                  map={ReisartikelenTexture}
                  roughness={0.3}
                  metalness={0.3}
                  opacity={project5Screen ? 1 : 0}
                  transparent
                />
              </mesh>
            </group>
            <group ref={laptopBottom}>
              <mesh
                geometry={nodes.Modern_Slim_Laptop_Base_0.geometry}
                material={materials.Base}
              />
              <mesh
                geometry={nodes.Modern_Slim_Laptop_Touchpad_0.geometry}
                material={materials.Touchpad}
              />
              <mesh
                geometry={
                  nodes.Modern_Slim_Laptop_Plastic_Black_Ports_0.geometry
                }
                material={materials.Plastic_Black_Ports}
              />
              <mesh
                geometry={nodes.Modern_Slim_Laptop_Lights_0.geometry}
                material={materials.Lights}
              />
              <mesh
                geometry={nodes.Keyboard_Keyboard_0.geometry}
                material={materials.Keyboard}
                position={[-0.07, 0, 0.01]}
                rotation={[0.02, 0, 0]}
              />
            </group>
          </group>
        </group>
      </group>
    </Float>
  );
}

useGLTF.preload("/modelsResource/laptop.glb");
